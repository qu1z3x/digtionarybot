import TelegramBot from "node-telegram-bot-api";
import cron from "node-cron";
import fs from "fs";

import {
	sendDataAboutText,
	sendDataAboutButton,
	sendDataAboutError,
	sendDataAboutDataBase,
} from "./tgterminal.js";

import { config } from "./config.js";

const TOKEN = config.TOKENs[1];
const bot = new TelegramBot(TOKEN, { polling: true });

const qu1z3xId = "923690530";

let BotName = "digtionarybot";

let usersData = [];
let systemData = {
	feedbacksAllTime: 0,
	activityAllTime: 0,
};

bot.setMyCommands([
	{
		command: "/settings",
		description: "–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öôÔ∏è",
	},
	{
		command: "/menu",
		description: "–º–æ–µ –º–µ–Ω—é ‚úçÔ∏è",
	},
]);

let match, rndNum, textToSayHello;

async function firstMeeting(chatId) {
	const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

	dataAboutUser.action = "firstMeeting";

	try {
		bot.sendChatAction(chatId, "typing");

		await bot.sendMessage(chatId, `–ø—Ä–∏–≤–µ—Ç-–ø—Ä–∏–≤–µ—Ç, <b>${dataAboutUser.login}!</b>`, {
			parse_mode: "HTML",
			disable_web_page_preview: true,
		});

		bot.sendChatAction(chatId, "typing");

		setTimeout(() => {
			bot.sendMessage(
				chatId,
				`<b>–ø—Ä–æ–≤–µ—Ä—áÃÅ–∏–∫ –Ω–∞ —Å–≤—è–∑–∏! </b>\n\n—ç—Ç–∞ <b>¬´—áÃÅ¬ª</b> —Ü–µ–ø–ª—è–µ—Ç, —Å–æ–≥–ª–∞—Å–∏—Å—å? ü§ó`,
				{
					parse_mode: "HTML",
					disable_web_page_preview: true,
				}
			);
		}, 2000);

		bot.sendChatAction(chatId, "typing");

		setTimeout(async () => {
			await bot.sendMessage(chatId, "„Ö§", {}).then((message) => {
				dataAboutUser.messageId = message.message_id;
			});

			menu(chatId);
		}, 4500);
	} catch (error) {
		console.log(error);
		sendDataAboutError(chatId, dataAboutUser.login, `${String(error)}`);
	}
}

async function menu(chatId) {
	const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

	const dateNowHHNN = new Date().getHours() * 100 + new Date().getMinutes();

	if (dateNowHHNN < 1200 && dateNowHHNN >= 600) textToSayHello = "–¥–æ–±—Ä–æ–µ —É—Ç—Ä–æ";
	else if (dateNowHHNN < 1700 && dateNowHHNN >= 1200) textToSayHello = "–¥–æ–±—Ä—ã–π –¥–µ–Ω—å";
	else if (dateNowHHNN < 2200 && dateNowHHNN >= 1700) textToSayHello = "–¥–æ–±—Ä—ã–π –≤–µ—á–µ—Ä";
	else if (dateNowHHNN >= 2200 || dateNowHHNN < 600) textToSayHello = "–¥–æ–±—Ä–æ–π –Ω–æ—á–∏";

	dataAboutUser.action = "menu";

	try {
		await bot.editMessageMedia(
			{
				type: "photo",
				media: "AgACAgIAAxkBAAIC62hVL3h8BbSC3PAakQNFvwh8ayRPAAKv-jEb_aKxShkwkJpyG6dzAQADAgADcwADNgQ",
				caption: `<b>${dataAboutUser.login}, —è –≥–æ—Ç–æ–≤!</b>\n\n<blockquote><i>—Å–¥–µ–ª–∞—é –≥—Ä–∞–º–æ—Ç–Ω—ã–º —Ç–µ–±—è..\n–∏ –ª—é–±–æ–µ —Ç–≤–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ!)</i></blockquote>\n\n<b>–∂–¥—É —Ç–≤–æ–π —Ç–µ–∫—Å—Ç –Ω–∏–∂–µ üëá</b>`,
				parse_mode: "HTML",
			},
			{
				chat_id: chatId,
				message_id: usersData.find((obj) => obj.chatId == chatId).messageId,
				disable_web_page_preview: true,
				reply_markup: {
					inline_keyboard: [
						[
							{ text: `–ø–æ–¥–¥–µ—Ä–∂–∫–∞ üí≠`, callback_data: `supportMenu0` },
							{ text: `–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öôÔ∏è`, callback_data: `settings` },
						],
					],
				},
			}
		);
	} catch (error) {
		console.log(error);
		sendDataAboutError(chatId, dataAboutUser.login, `${String(error)}`);
	}
}

async function explanation(chatId) {
	const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

	try {
		dataAboutUser.action = "explanation";

		const currentSession = dataAboutUser.currentSession;
		const response = dataAboutUser.currentSession.response;

		await bot.editMessageText(
			`${
				response.isCorrect
					? `<b>‚úÖ –≤—Å–µ –Ω–∞–ø–∏—Å–∞–Ω–æ –≤–µ—Ä–Ω–æ!</b>`
					: `<b>‚ùå –Ω–∞–ø–∏—Å–∞–Ω–æ –Ω–µ–≤–µ—Ä–Ω–æ(\n\nüëå–ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ç–∞–∫:</b>\n<blockquote><i>${
							response.corrected ? response.corrected : `—á—Ç–æ-—Ç–æ –Ω–µ—è—Å–Ω–æ–µ.. üòÆ`
					  }</i></blockquote>${
							currentSession.explanationLevel >= 1
								? `\n\n<b>üëÄ –ø–æ—è—Å–Ω–µ–Ω–∏–µ:</b>\n<i>${response.explanation}</i>${
										currentSession.explanationLevel >= 2
											? `\n\n<b>üí°–ø—Ä–∏–º–µ—Ä:</b>\n<blockquote><i>‚Ä¢ ¬´${response.example}¬ª</i></blockquote>\n\n<a href="https://t.me/${BotName}/?start=supportMenu1">–ø—Ä–æ–±–ª–µ–º–∞?</a>`
											: ``
								  }`
								: ``
					  }`
			}`,
			{
				parse_mode: "html",
				chat_id: chatId,
				message_id: usersData.find((obj) => obj.chatId == chatId).messageId,
				disable_web_page_preview: true,
				reply_markup: {
					inline_keyboard: [
						[
							{
								text: !response.isCorrect
									? currentSession.explanationLevel == 0
										? `–ø–æ–∫–∞–∑–∞—Ç—å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ üëÄ`
										: currentSession.explanationLevel == 1
										? `–ø—Ä–∏–≤–µ—Å—Ç–∏ –ø—Ä–∏–º–µ—Äüí°`
										: `–ø—Ä–æ–≤–µ—Ä—áÃÅ–∏–∫ –≤—Å–µ –ø–æ—è—Å–Ω–∏—Ç)`
									: `–ø—Ä–æ–≤–µ—Ä—áÃÅ–∏–∫ –≤—Å–µ –ø–æ—è—Å–Ω–∏—Ç)`,
								callback_data: `setExplanationLevel`,
							},
						],
					],
				},
			}
		);
	} catch (error) {
		console.log(error);
		sendDataAboutError(chatId, dataAboutUser.login, `${String(error)}`);
	}
}

async function supportMenu(chatId, stageNum = 1) {
	const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

	try {
		await bot.editMessageMedia(
			{
				type: "photo",
				media: "AgACAgIAAxkBAAIC6mhVLz9QFnAnJ1hF-ak3ooPXQYJuAAJN7zEbSs6wSk8BIe5qqZ6gAQADAgADcwADNgQ",
				caption: `${
					stageNum == 0
						? `—Ç—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—à—å <b>–æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –Ω–∞–º</b>`
						: stageNum == 1
						? `–¥–∞.. <b>—è –Ω–µ —Å–æ–≤–µ—Ä—à–µ–Ω–µ–Ω(.. –∏–∑–≤–∏–Ω–∏.. üò£</b>\n\n–∏–ª–∏ —ç—Ç–æ <i>–ú–ê–°–®–¢–ê–ë–ù–ê–Ø</i> –ø—Ä–æ–±–ª–µ–º–∞? üòÆ`
						: ``
				}\n\n<b>–ø–∏—à–∏ –ø–æ –ª—é–±–æ–º—É –≤–æ–ø—Ä–æ—Å—É üòâ</b>`,
				parse_mode: "HTML",
			},
			{
				chat_id: chatId,
				message_id: usersData.find((obj) => obj.chatId == chatId).messageId,
				disable_web_page_preview: true,
				reply_markup: {
					inline_keyboard: [
						[{ text: `—Å–≤—è–∑–∞—Ç—å—Å—è (–≤—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—Ç–∏–º) üí≠`, url: `https://t.me/qu1z3x` }],
						[
							{
								text: dataAboutUser.action != "explanation" ? `üëà –Ω–∞–∑–∞–¥` : "",
								callback_data: dataAboutUser.action,
							},
						],
					],
				},
			}
		);
	} catch (error) {
		console.log(error);
		sendDataAboutError(chatId, dataAboutUser.login, `${String(error)}`);
	}
}

async function settings(chatId) {
	const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

	if (dataAboutUser.action != "editLogin") dataAboutUser.action = "settings";

	try {
		await bot.editMessageMedia(
			{
				type: "photo",
				media: "AgACAgIAAxkBAAIDgmhaNhyAgNiYaSFGR3HTLxGOc06KAAKu-TEb7JXRSugtR_CaN_8AAQEAAwIAA3kAAzYE",
				caption: `<b>üë§ –ü—Ä–æ—Ñ–∏–ª—å:</b>\n<blockquote><b>‚Ä¢</b> —Ç–≤–æ–µ –∏–º—è: ${
					dataAboutUser.action == "editLogin"
						? `... <a href="https://t.me/${BotName}/?start=stopEditLogin">‚ùå</a>`
						: `<b>${dataAboutUser.login} <a href="https://t.me/${BotName}/?start=editLogin">‚úèÔ∏è</a></b>`
				}\n<b>‚Ä¢</b> —Ç—ã —Å–æ –º–Ω–æ–π <b>c ${
					dataAboutUser.registrationDate
				}</b></blockquote>\n\n<b>üõ†Ô∏è –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏:</b>\n<blockquote><b>‚Ä¢</b> —É—Ä–æ–≤–µ–Ω—å –ø—Ä–æ–≤–µ—Ä–∫–∏: ${
					dataAboutUser.explanationLevel == 0
						? `<b>¬´–æ—Ç–≤–µ—Ç –∏ –≤—Å–µ¬ª</b>\n(–ø—Ä–æ—Å—Ç–æ - –≤–µ—Ä–Ω–æ –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ)`
						: dataAboutUser.explanationLevel == 1
						? `<b>¬´–æ–±—ä—è—Å–Ω—è—è¬ª</b>\n(–µ—â–µ —Å–∫–∞–∂—É –ø–æ –∫–∞–∫–æ–º—É –ø—Ä–∞–≤–∏–ª—É)`
						: dataAboutUser.explanationLevel == 2
						? `<b>¬´–¥—É—à–Ω–∏–ª–∞¬ª</b>\n(–∏ –µ—â–µ –ø—Ä–∏–≤–µ–¥—É –ø—Ä–∏–º–µ—Ä)`
						: ``
				}</blockquote>\n\n<b>–Ω–∞–∂–∏–º–∞–π –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è üëá</b>`,
				parse_mode: "HTML",
			},
			{
				chat_id: chatId,
				message_id: usersData.find((obj) => obj.chatId == chatId).messageId,
				disable_web_page_preview: true,
				reply_markup: {
					inline_keyboard: [
						[
							{
								text: `—É—Ä–æ–≤–µ–Ω—å: ¬´${
									dataAboutUser.explanationLevel == 0
										? `–æ—Ç–≤–µ—Ç –∏ –≤—Å–µ`
										: dataAboutUser.explanationLevel == 1
										? `–æ–±—ä—è—Å–Ω—è—è`
										: dataAboutUser.explanationLevel == 2
										? `–¥—É—à–Ω–∏–ª–∞`
										: ``
								}¬ª üîÉ`,
								callback_data: `setExplanationLevel`,
							},
						],
						[
							{ text: `üëà –Ω–∞–∑–∞–¥`, callback_data: `exit` },
							{ text: `–æ—Ç digfusion`, url: `https://t.me/digfusion` },
						],
					],
				},
			}
		);
	} catch (error) {
		console.log(error);
		sendDataAboutError(chatId, dataAboutUser.login, `${String(error)}`);
	}
}

async function getResponse(chatId, request = null, thinkingMessage = true) {
	const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

	try {
		if (thinkingMessage) {
			const thinkingMessageVariations = [
				"–ø–µ—Ä–µ–ª–∏—Å—Ç—ã–≤–∞—é –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏.. üìö",
				"–≤—ã–∏—Å–∫–∏–≤–∞—é –ø—Ä–∞–≤–∏–ª–æ –≤ —Ç–æ–ª–∫–æ–≤—ã—Ö —Å–ª–æ–≤–∞—Ä—è—Ö.. üßê",
				"—Å—Ä–∞–≤–Ω–∏–≤–∞—é —Å –Ω–æ—Ä–º–∞–º–∏ —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞.. ‚úçÔ∏è",
				"–ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—è—é –Ω–∞ —Å–ª–æ–∂–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–∞—Ö.. üßê",
				"–ø–µ—Ä–µ—á–∏—Ç—ã–≤–∞—é –∞–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã.. üîç",
				"–ø—Ä–æ–≤–µ—Ä—è—é —Å —ç–∫—Å–ø–µ—Ä—Ç–∞–º–∏ –ï–ì–≠.. üß†",
				"–∏—â—É –∑–¥–µ—Å—å –ø–æ–¥–≤–æ—Ö.. üåÄ",
				"–≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ—á–∏—Ç—ã–≤–∞—é —Å–æ–æ–±—â–µ–Ω–∏–µ.. üëÄ",
				"—à–∞—Ä—é –ø–æ –∞—Ä—Ö–∏–≤–∞–º –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–æ–π –±–∞–∑—ã.. üóÇÔ∏è",
				"–¥–æ—Å—Ç–∞—é –∏–∑ –≥–ª—É–±–∏–Ω –ø–∞–º—è—Ç–∏ –≤—Å–µ –ø—Ä–∞–≤–∏–ª–∞.. üïµÔ∏è",
			];

			rndNum = Math.floor(Math.random() * thinkingMessageVariations.length);

			await bot
				.sendMessage(chatId, `<b>${thinkingMessageVariations[rndNum]}</b>`, {
					parse_mode: "HTML",
					disable_web_page_preview: true,
					reply_to_message_id: dataAboutUser.currentSession.replyingMessageId,
				})
				.then((message) => {
					dataAboutUser.messageIdOther = message.message_id;
				});
		}

		bot.sendChatAction(chatId, "typing");

		const url = "https://openrouter.ai/api/v1/chat/completions";
		const headers = {
			Authorization: `Bearer ${config.metaKey}`, // API –∫–ª—é—á —Å —Å–∞–π—Ç–∞
			"Content-Type": "application/json",
		};

		const payload = {
			model: "meta-llama/llama-4-maverick",
			messages: [
				{
					role: "system", // —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
					content: "‚ùó–ù–ò–ß–ï–ì–û –ö–†–û–ú–ï –û–¢–í–ï–¢–ê JSON –†–ê–ó–ú–ï–¢–ö–û–ô!!!",
				},
				{
					role: "user", // –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
					content: `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç–µ–∫—Å—Ç –ø–æ –Ω–æ—Ä–º–∞–º —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞:

"${request.replaceAll(/<\/?[a-z]+>/gi, "")}"

üîç –ß—Ç–æ –Ω—É–∂–Ω–æ:
–ü—Ä–æ–≤–µ—Ä—å —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–µ –æ—à–∏–±–∫–∏ ‚Äî –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—è, –ø—É–Ω–∫—Ç—É–∞—Ü–∏—è, –≥—Ä–∞–º–º–∞—Ç–∏–∫–∞, —Å–∏–Ω—Ç–∞–∫—Å–∏—Å.  
‚ùóÔ∏è–ù–µ —Ç—Ä–æ–≥–∞–π —Å—Ç–∏–ª–∏—Å—Ç–∏–∫—É, –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ, —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–π —Å—Ç–∏–ª—å, –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Ç–æ—á–∫–∏, —Å—Ç—Ä–æ—á–Ω—ã–µ –±—É–∫–≤—ã, "–µ" –≤–º–µ—Å—Ç–æ "—ë" ‚Äî —ç—Ç–æ –≤—Å—ë –Ω–æ—Ä–º.

‚úçÔ∏è –í –æ–±—ä—è—Å–Ω–µ–Ω–∏–∏:
‚Äî –ï—Å–ª–∏ –æ—à–∏–±–æ–∫ –Ω–µ—Å–∫–æ–ª—å–∫–æ ‚Äî –Ω—É–º–µ—Ä—É–π –ø—Ä–∞–≤–∏–ª–∞ (1, 2, 3...)  
‚Äî –ü–∏—à–∏ –≤ —Ç–æ–º –∂–µ –≤–∞–π–±–µ, —á—Ç–æ –∏ —é–∑–µ—Ä: –Ω–∞ *"—Ç—ã"*, –±–µ–∑ –∑–∞–≥–æ–Ω–æ–≤, –ø–æ-—á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏, –Ω–æ —Ç–æ—á–Ω–æ  
‚Äî –ë—É–¥—å –∫—Ä–∞—Ç–∫–∏–º, –ø–∏—à–∏ —Å—Ç—Ä–æ–≥–æ –ø–æ –¥–µ–ª—É  
‚Äî –°—Å—ã–ª–∞–π—Å—è –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –º–µ—Å—Ç–∞ —Ç–µ–∫—Å—Ç–∞

üß± –í –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–º —Ç–µ–∫—Å—Ç–µ:
‚Äî –ü–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ—Ö—Ä–∞–Ω–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ä–∏–≥–∏–Ω–∞–ª–∞ (–∞–±–∑–∞—Ü—ã, –ø—Ä–æ–±–µ–ª—ã, –ø–µ—Ä–µ–Ω–æ—Å—ã)

üìå –ï—Å–ª–∏ —Ç–µ–º–∞ –∏–Ω—Ç–∏–º–Ω–∞—è, —Å—Ç—Ä–∞–Ω–Ω–∞—è –∏–ª–∏ –¥–∏–∫–∞—è ‚Äî –ø–ª–µ–≤–∞—Ç—å, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—å –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç—å. –°–º—ã—Å–ª –Ω–µ –≤–∞–∂–µ–Ω, —Ç–æ–ª—å–∫–æ —Ñ–æ—Ä–º–∞.

üìé –í "example":
‚Äî –û–¥–∏–Ω –∫–æ—Ä–æ—Ç–∫–∏–π –ø—Ä–∏–º–µ—Ä (–¥–æ 12 —Å–ª–æ–≤), –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –í–°–ï –æ—à–∏–±–∫–∏ –∏–∑ "explanation"

‚ÄºÔ∏è –û—Ç–≤–µ—Ç —Å—Ç—Ä–æ–≥–æ –≤ —ç—Ç–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (JSON, –±–µ–∑ –ª–∏—à–Ω–µ–≥–æ —Ç–µ–∫—Å—Ç–∞):

{
  "isCorrect": true –∏–ª–∏ false,
  "corrected": "", // –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∏
  "explanation": "", // –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞–∑–±–æ—Ä –æ—à–∏–±–æ–∫ –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º
  "example": "" // –ø—Ä–∏–º–µ—Ä, –∏–ª–ª—é—Å—Ç—Ä–∏—Ä—É—é—â–∏–π –≤—Å–µ –æ—à–∏–±–∫–∏
}

üìå –ü—Ä–∞–≤–∏–ª–∞:
- –ï—Å–ª–∏ isCorrect = true ‚Äî –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è –ø—É—Å—Ç—ã–µ, –Ω–æ JSON-—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è
- –ï—Å–ª–∏ isCorrect = false ‚Äî –≤—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã
- –ù–∏–∫–∞–∫–æ–≥–æ –ª–∏—à–Ω–µ–≥–æ —Ç–µ–∫—Å—Ç–∞. –¢–æ–ª—å–∫–æ —á–∏—Å—Ç—ã–π JSON. –í—Å—ë.`,
				},
			],
		};

		let response = await fetch(url, {
			method: "POST",
			headers,
			body: JSON.stringify(payload),
		});

		const data = await response.json();

		response = data.choices[0].message.content
			.replaceAll("```", "")
			.replaceAll("json", "")
			.replaceAll("JSON", "")
			.replaceAll(/\„Äê.*?„Äë/g, "")
			.replaceAll(/<\/?[a-z]+>/gi, "")
			.replaceAll("<", "")
			.replaceAll(">", "")
			.replaceAll("/", "");

		if (JSON.parse(response)) {
			response = JSON.parse(response);

			if (thinkingMessage)
				try {
					await bot.deleteMessage(chatId, dataAboutUser.messageIdOther);
				} catch (error) {}

			return response;
		}
	} catch (error) {
		console.log(error);
		sendDataAboutError(chatId, dataAboutUser.login, `${String(error)}\n\n‚ùóGPT_ERROR`);

		if (thinkingMessage)
			try {
				await bot.deleteMessage(chatId, dataAboutUser.messageIdOther);
			} catch (error) {}

		await bot.sendMessage(
			chatId,
			`–≤–∏–¥–∏–º–æ —è –ø–æ—Ç–µ—Ä—è–ª <b>—Ç–æ–ª–∫–æ–≤—ã–π —Å–ª–æ–≤–∞—Ä—å –°.–ò. –û–∂–µ–≥–æ–≤–∞,</b> –∏–∑–≤–∏–Ω–∏(.. üò£\n\n<b>—Ç—ã –º–æ–∂–µ—à—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏ üëá</b>`,
			{
				parse_mode: "HTML",
				disable_web_page_preview: true,
				reply_markup: {
					inline_keyboard: [
						[{ text: `—Å–≤—è–∑–∞—Ç—å—Å—è (–≤—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—Ç–∏–º) üí≠`, url: `https://t.me/qu1z3x` }],
					],
				},
			}
		);

		return null;
	}
}

async function digfusionInfo(chatId) {
	const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

	try {
		await bot.editMessageText(
			`<i><b>—ç—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–æ digfusion</b> ü§ç</i>\n\n<b>–ü—Ä–∏–≤–µ—Ç!üëã\n–≠—Ç–æ digfusion ‚Äî —Å–æ–∑–¥–∞–µ–º –º–æ—â–Ω–µ–π—à–∏—Ö Telegram-–±–æ—Ç–æ–≤ –ø–æ–¥ –∫–ª—é—á</b>\n\n<blockquote>–ë—ã—Å—Ç—Ä–æ, –Ω–∞–¥–µ–∂–Ω–æ –∏ —Å —É–º–æ–º. –ù–∞–º –¥–æ–≤–µ—Ä—è—é—Ç <b>–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –ª–∏—á–Ω–æ—Å—Ç–∏,</b> –∏ –º—ã –¥–µ–ª–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π <b>—Ü–µ–ø–ª—è–µ—Ç –∏ –ø—Ä–∏–Ω–æ—Å–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç üöÄ</b></blockquote>\n\n<b><a href="https://t.me/digfusionbot">–£—Å–ª—É–≥–∏</a> ‚Ä¢ <a href="https://t.me/digfeedbacks">–û—Ç–∑—ã–≤—ã</a> ‚Ä¢ <a href="https://t.me/qu1z3x">–°–≤—è–∑—å</a></b>`,
			{
				parse_mode: "html",
				chat_id: chatId,
				message_id: usersData.find((obj) => obj.chatId == chatId).messageId,
				disable_web_page_preview: true,
				reply_markup: {
					inline_keyboard: [
						[
							{
								text: "telegram –∫–∞–Ω–∞–ª üì£",
								url: "https://t.me/digfusion",
							},
						],
						[
							{ text: "üëà –Ω–∞–∑–∞–¥", callback_data: "settings" },
							{
								text: "—Å–≤—è–∑–∞—Ç—å—Å—è üí≠",
								url: "https://t.me/qu1z3x",
							},
						],
					],
				},
			}
		);
	} catch (error) {
		console.log(error);
		sendDataAboutError(chatId, dataAboutUser.login, `${String(error)}`);
	}
}

async function StartAll() {
	if (TOKEN == config.TOKENs[1]) BotName = "digtionarybot";
	if (TOKEN == config.TOKENs[0]) BotName = "digtestingbot";

	let dataFromDB = fs.readFileSync("DB.json");

	if (dataFromDB != "" && dataFromDB != "[]") {
		dataFromDB = JSON.parse(dataFromDB);

		usersData = dataFromDB.usersData || [];
		systemData = dataFromDB.systemData || [];
	}

	bot.on("photo", async (message) => {
		console.log(message);
	});

	bot.on("text", async (message) => {
		const chatId = message.chat.id;
		let text = message.text;

		let dataAboutUser = usersData?.find((obj) => obj.chatId == chatId);

		try {
			if (!dataAboutUser) {
				usersData.push({
					chatId: chatId,
					login: message.from.first_name,

					currentSession: {
						response: {},
						explanationLevel: 0,
						replyingMessageId: null,
					},

					explanationLevel: 0,

					messageId: null,
					action: null,

					messageIdOther: null,
					telegramFirstName: message.from.first_name,
					supportiveCount: 1,
					registrationDate: `${new Date().getDate().toString().padStart(2, "0")}.${(
						new Date().getMonth() + 1
					)
						.toString()
						.padStart(2, "0")}.${(new Date().getFullYear() % 100)
						.toString()
						.padStart(2, "0")}`,
					date: new Date(),
				});

				dataAboutUser = usersData.find((obj) => obj.chatId == chatId);
			}
			if (dataAboutUser) {
				if (Array.from(text)[0] != "/") {
					if (dataAboutUser.action == "editLogin") {
						dataAboutUser.login = text;

						dataAboutUser.action = "settings";

						bot.deleteMessage(chatId, message.message_id);

						settings(chatId, true, true);
					} else {
						const currentSession = dataAboutUser.currentSession;

						currentSession.explanationLevel = dataAboutUser.explanationLevel;

						currentSession.replyingMessageId = message.message_id;

						currentSession.response = await getResponse(chatId, text);

						if (currentSession.response) {
							await bot
								.sendMessage(chatId, "„Ö§", {
									reply_to_message_id: currentSession.replyingMessageId,
								})
								.then((message) => {
									dataAboutUser.messageId = message.message_id;
								});

							explanation(chatId);
						}
					}
				}

				if (Array.from(text)[0] == "/") {
					if (text.includes("/start supportMenu")) {
						match = text.match(/^\/start supportMenu(.*)$/);

						await bot.sendMessage(chatId, "„Ö§").then((message) => {
							dataAboutUser.messageId = message.message_id;
						});

						supportMenu(chatId, parseInt(match[1]));
					}

					switch (text) {
						case "/restart":
						case "/start":
							if (dataAboutUser.action != "explanation")
								try {
									bot.deleteMessage(chatId, dataAboutUser.messageId);
								} catch (error) {}

							firstMeeting(chatId, 1);
							break;
						case "/menu":
							if (dataAboutUser.action != "explanation")
								try {
									bot.deleteMessage(chatId, dataAboutUser.messageId);
								} catch (error) {}

							await bot.sendMessage(chatId, "„Ö§").then((message) => {
								dataAboutUser.messageId = message.message_id;
							});

							menu(chatId);
							break;
						case "":
							break;
						case "/settings":
							if (dataAboutUser.action != "explanation")
								try {
									bot.deleteMessage(chatId, dataAboutUser.messageId);
								} catch (error) {}

							await bot.sendMessage(chatId, "„Ö§").then((message) => {
								dataAboutUser.messageId = message.message_id;
							});

							settings(chatId);
							break;
						case "":
							break;

						case "/start editLogin":
							dataAboutUser.action = "editLogin";

							settings(chatId);
							break;
						case "/start stopEditLogin":
							dataAboutUser.action = "menu";

							settings(chatId);
							break;

						case "":
							break;
						case "":
							break;
						case "/data":
							if (chatId == qu1z3xId) {
								const dataToSend = {
									usersData,
									systemData,
								};
								sendDataAboutDataBase(dataToSend);
							}
							break;

						case "":
							break;
						case "":
							break;
						case "":
							break;
						case "":
							break;
						case "":
							break;
						case "":
							break;
					}

					bot.deleteMessage(chatId, message.message_id);
				}
			}

			if (chatId != qu1z3xId) {
				sendDataAboutText(chatId, dataAboutUser.login, text);
			}
		} catch (error) {
			console.log(error);
			sendDataAboutError(chatId, dataAboutUser?.login, `${String(error)}`);
		}
	});

	bot.on("callback_query", async (query) => {
		const chatId = query.message.chat.id;
		const data = query.data;

		let dataAboutUser = usersData?.find((obj) => obj.chatId == chatId);

		if (!dataAboutUser) {
			usersData.push({
				chatId: chatId,
				login: query.from.first_name,

				currentSession: {
					response: {},
					explanationLevel: 0,
					replyingMessageId: null,
				},

				explanationLevel: 0,

				messageId: null,
				action: null,

				messageIdOther: null,
				telegramFirstName: query.from.first_name,
				supportiveCount: 1,
				registrationDate: `${new Date().getDate().toString().padStart(2, "0")}.${(
					new Date().getMonth() + 1
				)
					.toString()
					.padStart(2, "0")}.${(new Date().getFullYear() % 100)
					.toString()
					.padStart(2, "0")}`,
				date: new Date(),
			});

			dataAboutUser = usersData.find((obj) => obj.chatId == chatId);
		}

		if (dataAboutUser) {
			try {
				if (!dataAboutUser.inBlackList) {
					if (query.message.message_id == dataAboutUser.messageIdOther) {
						try {
							bot.deleteMessage(chatId, dataAboutUser.messageIdOther);
						} catch (error) {}

						dataAboutUser.messageIdOther = null;

						await bot.sendMessage(chatId, "„Ö§").then((message) => {
							dataAboutUser.messageId = message.message_id;
						});
					} else dataAboutUser.messageId = query.message.message_id;

					if (data.includes("supportMenu")) {
						match = data.match(/^supportMenu(.*)$/);

						supportMenu(chatId, parseInt(match[1]));
					}

					switch (data) {
						case "exit":
						case "menu":
							menu(chatId);
							break;
						case "setExplanationLevel":
							switch (dataAboutUser.action) {
								case "settings":
									if (dataAboutUser.explanationLevel < 2) {
										++dataAboutUser.explanationLevel;
									} else if (dataAboutUser.explanationLevel >= 2) {
										dataAboutUser.explanationLevel = 0;
									}
									settings(chatId);
									break;
								case "explanation":
									if (
										!dataAboutUser.currentSession.response.isCorrect &&
										dataAboutUser.currentSession.explanationLevel < 2
									) {
										++dataAboutUser.currentSession.explanationLevel;
										explanation(chatId);
									}

									break;
							}
							break;
						case "":
							break;
						case "":
							break;
						case "":
							break;
						case "settings":
							settings(chatId);
							break;
						case "":
							break;
						case "":
							break;
						case "digfusionInfo":
							digfusionInfo(chatId);
							break;
						case "":
							break;
						case "":
							break;
						case "":
							break;
						case "":
							break;
						case "":
							break;
						case "":
							break;
						case "deleteexcess":
							try {
								bot.deleteMessage(chatId, query.message.message_id);
							} catch (error) {}
							break;
					}
				}

				if (chatId != qu1z3xId) {
					sendDataAboutButton(chatId, dataAboutUser.login, data);
				}

				// fs.writeFileSync(
				// 	"DB.json",
				// 	JSON.stringify({ usersData: usersData,
				// systemData: systemData, }, null, 2)
				// );
			} catch (error) {
				console.log(error);
				sendDataAboutError(chatId, dataAboutUser.login, `${String(error)}`);
			}
		}
	});

	cron.schedule(`0 */1 * * *`, function () {
		// –ó–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
		try {
			if (TOKEN == config.TOKENs[1]) {
				fs.writeFileSync(
					"DB.json",
					JSON.stringify(
						{
							usersData: usersData,
						},
						null,
						2
					)
				);

				if (new Date().getHours() % 12 == 0)
					sendDataAboutDataBase({
						usersData: usersData,
						systemData: systemData,
					});
			}
		} catch (error) {}
	});
}

StartAll();
